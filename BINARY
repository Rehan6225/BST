#include<stdio.h> 
#include<stdlib.h> 
   
struct node 
{ 
    int key; 
    struct node *left, *right; 
}; 
   
// A utility function to create a new BST node 
struct node *newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
} 
   
void inorder(struct node *root) 
{ 
    if (root != NULL) 
    { 
        inorder(root->left); 
        printf("%d \n", root->key); 
        inorder(root->right); 
    } 
}
struct node* insert(struct node* node, int key) 
{ 
    /* If the tree is empty, return a new node */
    if (node == NULL) return newNode(key); 
  
    /* Otherwise, recur down the tree */
    if (key < node->key) 
        node->left  = insert(node->left, key); 
    else if (key > node->key) 
        node->right = insert(node->right, key);    
  
    /* return the (unchanged) node pointer */
    return node; 
  }
  void insertafter(int v,int va)
{
 struct node *newnode,*temp,*preptr;
 newnode=(struct node*)malloc(sizeof(struct node));
 newnode->data=va;
 temp=head;
 preptr=temp;
  while(temp->data!=v)
  {
   preptr=temp;
   temp=temp->next;
  }
  preptr=preptr->next;
  temp=temp->next;
  preptr->next=newnode;
  //temp->next=newnode;
  newnode->next=temp;
}
    int main() 
{ 
    
    struct node *root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80); 
    int v,va;
    // print inoder traversal of the BST 
    cin>>v>>va;
   insertafter(v,va);
    inorder(root); 
   
    return 0; 
} 
